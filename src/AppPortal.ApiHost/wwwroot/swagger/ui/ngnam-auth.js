var ngnamAuth = ngnamAuth || {};
(function () {

    /* Application paths *****************************************/

    // Current application root path (including virtual directory if exists).
    ngnamAuth.appPath = ngnamAuth.appPath || '/';

    /* AUTHORIZATION **********************************************/
    // Implements Authorization API that simplifies usage of authorization scripts generated by Abp.

    ngnamAuth.auth = ngnamAuth.auth || {};

    ngnamAuth.auth.tokenCookieName = 'ngnam.AuthToken';
    ngnamAuth.auth.tokenHeaderName = 'Authorization';

    ngnamAuth.auth.setToken = function (authToken, expireDate) {
        ngnamAuth.utils.setCookieValue(ngnamAuth.auth.tokenCookieName, authToken, expireDate, ngnamAuth.appPath);
    };

    ngnamAuth.auth.getToken = function () {
        return ngnamAuth.utils.getCookieValue(ngnamAuth.auth.tokenCookieName);
    }

    ngnamAuth.auth.clearToken = function () {
        ngnamAuth.auth.setToken();
    }

    /* UTILS ***************************************************/

    ngnamAuth.utils = ngnamAuth.utils || {};

    /**
         * Sets a cookie value for given key.
         * This is a simple implementation created to be used by ABP.
         * Please use a complete cookie library if you need.
         * @param {string} key
         * @param {string} value
         * @param {Date} expireDate (optional). If not specified the cookie will expire at the end of session.
         * @param {string} path (optional)
         */
    ngnamAuth.utils.setCookieValue = function (key, value, expireDate, path) {
        var cookieValue = encodeURIComponent(key) + '=';

        if (value) {
            cookieValue = cookieValue + encodeURIComponent(value);
        }

        if (expireDate) {
            cookieValue = cookieValue + "; expires=" + expireDate.toUTCString();
        }

        if (path) {
            cookieValue = cookieValue + "; path=" + path;
        }

        document.cookie = cookieValue;
    };

    /**
     * Gets a cookie with given key.
     * This is a simple implementation created to be used by ABP.
     * Please use a complete cookie library if you need.
     * @param {string} key
     * @returns {string} Cookie value or null
     */
    ngnamAuth.utils.getCookieValue = function (key) {
        var equalities = document.cookie.split('; ');
        for (var i = 0; i < equalities.length; i++) {
            if (!equalities[i]) {
                continue;
            }

            var splitted = equalities[i].split('=');
            if (splitted.length != 2) {
                continue;
            }

            if (decodeURIComponent(splitted[0]) === key) {
                return decodeURIComponent(splitted[1] || '');
            }
        }

        return null;
    };

    /**
     * Deletes cookie for given key.
     * This is a simple implementation created to be used by ABP.
     * Please use a complete cookie library if you need.
     * @param {string} key
     * @param {string} path (optional)
     */
    ngnamAuth.utils.deleteCookie = function (key, path) {
        var cookieValue = encodeURIComponent(key) + '=';

        cookieValue = cookieValue + "; expires=" + (new Date(new Date().getTime() - 86400000)).toUTCString();

        if (path) {
            cookieValue = cookieValue + "; path=" + path;
        }

        document.cookie = cookieValue;
    }

    /* SECURITY ***************************************/
    ngnamAuth.security = ngnamAuth.security || {};
    ngnamAuth.security.antiForgery = ngnamAuth.security.antiForgery || {};

    ngnamAuth.security.antiForgery.tokenCookieName = 'XSRF-TOKEN';
    ngnamAuth.security.antiForgery.tokenHeaderName = 'X-XSRF-TOKEN';

    ngnamAuth.security.antiForgery.getToken = function () {
        return ngnamAuth.utils.getCookieValue(ngnamAuth.security.antiForgery.tokenCookieName);
    };

})();
